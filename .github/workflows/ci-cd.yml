name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Backend with Maven
      run: |
        cd application-source/product-service
        mvn clean install -DskipTests
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Backend Tests
      run: |
        cd application-source/product-service
        mvn test
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm ci
        npm test -- --coverage --watchAll=false
        
  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build JAR for Docker
      run: |
        cd application-source/product-service
        mvn clean package -DskipTests
        
    - name: Build Frontend for Docker
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: product-service
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd application-source/product-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name prod-cluster
        
    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update backend deployment manifest
        sed -i "s|ECR_REGISTRY|$ECR_REGISTRY|g" k8s/product-service-deployment.yaml
        sed -i "s|IMAGE_TAG|$IMAGE_TAG|g" k8s/product-service-deployment.yaml
        
        # Update frontend deployment manifest
        sed -i "s|ECR_REGISTRY|$ECR_REGISTRY|g" k8s/frontend-deployment.yaml
        sed -i "s|IMAGE_TAG|$IMAGE_TAG|g" k8s/frontend-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/product-service-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        
        # Wait for deployments to complete
        kubectl rollout status deployment/product-service --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s
        
        # Get deployment status
        kubectl get pods -l app=product-service
        kubectl get pods -l app=frontend
        kubectl get services